From 0 Mon Sep 17 00:00:00 2001
From: "Fr. Br. George" <george@altlinux.org>
Date: Mon, 15 Oct 2012 15:44:28 +0400
Subject: [PATCH 02] bind-9.8.3-openbsd-owl-pidfile

Prevent from subsequent pidfile open tries

diff --git a/bind/bin/named/include/named/globals.h b/bind/bin/named/include/named/globals.h
index defaced..defaced 100644
--- a/bind/bin/named/include/named/globals.h
+++ b/bind/bin/named/include/named/globals.h
@@ -143,6 +143,8 @@ EXTERN const char *		ns_g_defaultpidfile 	INIT(NS_LOCALSTATEDIR
 EXTERN const char *		lwresd_g_defaultpidfile INIT(NS_LOCALSTATEDIR
 							     "/run/lwresd.pid");
 #endif
+EXTERN const char *		ns_g_pidfile		INIT(NS_LOCALSTATEDIR
+							    "/run/named.pid");
 
 EXTERN const char *		ns_g_username		INIT(NULL);
 
diff --git a/bind/bin/named/main.c b/bind/bin/named/main.c
index defaced..defaced 100644
--- a/bind/bin/named/main.c
+++ b/bind/bin/named/main.c
@@ -309,7 +309,7 @@ usage(void) {
 		"[-E engine] [-f|-g]\n"
 		"             [-n number_of_cpus] [-p port] [-s] "
 		"[-t chrootdir] [-u username]\n"
-		"             [-m {usage|trace|record|size|mctx}]\n");
+		"             [-i pidfile] [-m {usage|trace|record|size|mctx}]\n");
 }
 
 static void
@@ -463,9 +463,8 @@ parse_command_line(int argc, char *argv[]) {
 			ns_g_foreground = ISC_TRUE;
 			ns_g_logstderr = ISC_TRUE;
 			break;
-		/* XXXBEW -i should be removed */
 		case 'i':
-			lwresd_g_defaultpidfile = isc_commandline_argument;
+			ns_g_pidfile = isc_commandline_argument;
 			break;
 		case 'l':
 			ns_g_lwresdonly = ISC_TRUE;
@@ -721,6 +720,12 @@ setup(void) {
 	char *instance = NULL;
 #endif
 
+        /*
+	 * Write pidfile before chroot if specified on the command line
+	 */
+	if (ns_g_pidfile != NULL)
+		ns_os_preopenpidfile(ns_g_pidfile);
+
 	/*
 	 * Get the user and group information before changing the root
 	 * directory, so the administrator does not need to keep a copy
diff --git a/bind/bin/named/server.c b/bind/bin/named/server.c
index defaced..defaced 100644
--- a/bind/bin/named/server.c
+++ b/bind/bin/named/server.c
@@ -4939,16 +4939,20 @@ load_configuration(const char *filename, ns_server_t *server,
 	/*
 	 * Write the PID file.
 	 */
-	obj = NULL;
-	if (ns_config_get(maps, "pid-file", &obj) == ISC_R_SUCCESS)
-		if (cfg_obj_isvoid(obj))
-			ns_os_writepidfile(NULL, first_time);
+	if (ns_g_pidfile != NULL) {
+		ns_os_writepidfile(ns_g_pidfile, first_time);
+	} else {
+		obj = NULL;
+		if (ns_config_get(maps, "pid-file", &obj) == ISC_R_SUCCESS)
+			if (cfg_obj_isvoid(obj))
+				ns_os_writepidfile(NULL, first_time);
+			else
+				ns_os_writepidfile(cfg_obj_asstring(obj), first_time);
+		else if (ns_g_lwresdonly)
+			ns_os_writepidfile(lwresd_g_defaultpidfile, first_time);
 		else
-			ns_os_writepidfile(cfg_obj_asstring(obj), first_time);
-	else if (ns_g_lwresdonly)
-		ns_os_writepidfile(lwresd_g_defaultpidfile, first_time);
-	else
-		ns_os_writepidfile(ns_g_defaultpidfile, first_time);
+			ns_os_writepidfile(ns_g_defaultpidfile, first_time);
+	}
 
 	/*
 	 * Configure the server-wide session key.  This must be done before
@@ -5266,7 +5270,6 @@ load_configuration(const char *filename, ns_server_t *server,
 		}
 	}
 
-
 	obj = NULL;
 	if (options != NULL &&
 	    cfg_map_get(options, "memstatistics", &obj) == ISC_R_SUCCESS)
diff --git a/bind/bin/named/unix/include/named/os.h b/bind/bin/named/unix/include/named/os.h
index defaced..defaced 100644
--- a/bind/bin/named/unix/include/named/os.h
+++ b/bind/bin/named/unix/include/named/os.h
@@ -55,6 +55,9 @@ FILE *
 ns_os_openfile(const char *filename, mode_t mode, isc_boolean_t switch_user);
 
 void
+ns_os_preopenpidfile(const char *filename);
+
+void
 ns_os_writepidfile(const char *filename, isc_boolean_t first_time);
 
 void
diff --git a/bind/bin/named/unix/os.c b/bind/bin/named/unix/os.c
index defaced..defaced 100644
--- a/bind/bin/named/unix/os.c
+++ b/bind/bin/named/unix/os.c
@@ -54,6 +54,8 @@
 #endif
 
 static char *pidfile = NULL;
+static isc_boolean_t preopenpidfile = ISC_FALSE;
+static FILE *pidref = NULL;
 static int devnullfd = -1;
 
 #ifndef ISC_FACILITY
@@ -846,35 +848,57 @@ ns_os_openfile(const char *filename, mode_t mode, isc_boolean_t switch_user) {
 	return (fp);
 }
 
-void
-ns_os_writepidfile(const char *filename, isc_boolean_t first_time) {
-	FILE *lockfile;
-	pid_t pid;
+static FILE*
+open_pidfile(const char *filename, isc_boolean_t first_time) {
+	static FILE *lockfile=NULL;
 	char strbuf[ISC_STRERRORSIZE];
 	void (*report)(const char *, ...);
 
-	/*
-	 * The caller must ensure any required synchronization.
-	 */
-
-	report = first_time ? ns_main_earlyfatal : ns_main_earlywarning;
+ 	report = first_time ? ns_main_earlyfatal : ns_main_earlywarning;
 
 	cleanup_pidfile();
 
 	if (filename == NULL)
-		return;
+		return NULL;
 
 	pidfile = strdup(filename);
 	if (pidfile == NULL) {
 		isc__strerror(errno, strbuf, sizeof(strbuf));
 		(*report)("couldn't strdup() '%s': %s", filename, strbuf);
-		return;
+		return NULL;
 	}
 
 	lockfile = ns_os_openfile(filename, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH,
 				  first_time);
+	return lockfile;
+}
+
+void
+ns_os_preopenpidfile(const char *filename) {
+	pidref = open_pidfile(filename, ISC_TRUE);
+	preopenpidfile = ISC_TRUE;
+}
+
+void
+ns_os_writepidfile(const char *filename, isc_boolean_t first_time) {
+	FILE *lockfile;
+	pid_t pid;
+	char strbuf[ISC_STRERRORSIZE];
+	void (*report)(const char *, ...);
+
+	/*
+	 * The caller must ensure any required synchronization.
+	 */
+
+	report = first_time ? ns_main_earlyfatal : ns_main_earlywarning;
+
+	if (preopenpidfile == ISC_TRUE)
+		lockfile = pidref;
+	else
+		lockfile = open_pidfile(filename, first_time);
+
 	if (lockfile == NULL) {
-		cleanup_pidfile();
+		if (preopenpidfile == ISC_FALSE) cleanup_pidfile();
 		return;
 	}
 #ifdef HAVE_LINUXTHREADS
@@ -885,22 +909,23 @@ ns_os_writepidfile(const char *filename, isc_boolean_t first_time) {
 	if (fprintf(lockfile, "%ld\n", (long)pid) < 0) {
 		(*report)("fprintf() to pid file '%s' failed", filename);
 		(void)fclose(lockfile);
-		cleanup_pidfile();
+		if (preopenpidfile == ISC_FALSE) cleanup_pidfile();
 		return;
 	}
 	if (fflush(lockfile) == EOF) {
 		(*report)("fflush() to pid file '%s' failed", filename);
 		(void)fclose(lockfile);
-		cleanup_pidfile();
+		if (preopenpidfile == ISC_FALSE) cleanup_pidfile();
 		return;
 	}
 	(void)fclose(lockfile);
+	if (preopenpidfile == ISC_TRUE) pidref = NULL;
 }
 
 void
 ns_os_shutdown(void) {
 	closelog();
-	cleanup_pidfile();
+	if (preopenpidfile == ISC_FALSE) cleanup_pidfile();
 }
 
 isc_result_t
