--- bind-8.2.2_P5-orig/src/bin/named-xfer/named-xfer.c	Tue Nov  9 23:36:54 1999
+++ bind-8.2.2_P5/src/bin/named-xfer/named-xfer.c	Sat May 13 20:53:12 2000
@@ -180,10 +180,9 @@
 
 #define ENABLE_IXFR 0
 
-# ifdef SHORT_FNAMES
-extern long pathconf __P((const char *path, int name));	/* XXX */
-# endif
-
+#ifndef	TMPDIR
+#define	TMPDIR	"/var/tmp/"
+#endif
 
 static	struct zoneinfo	zone;		/* zone information */
 
@@ -377,15 +385,12 @@
 #endif
 			break;
 		case 'l':
-			ddtfile = (char *)malloc(strlen(optarg) +
+			ddtfile = (char *)malloc(sizeof(TMPDIR) + strlen(basename(optarg)) +
 						 sizeof(".XXXXXX") + 1);
 			if (!ddtfile)
 				panic("malloc(ddtfile)", NULL);
-#ifdef SHORT_FNAMES
-			filenamecpy(ddtfile, optarg);
-#else
-			(void) strcpy(ddtfile, optarg);
-#endif /* SHORT_FNAMES */
+			(void) strcpy(ddtfile, TMPDIR);
+			(void) strcat(ddtfile, basename(optarg));
 			(void) strcat(ddtfile, ".XXXXXX");
 			break;
 		case 's':
@@ -404,28 +409,24 @@
 			break;
 		case 'f':
 			dbfile = optarg;
-			tmpname = (char *)malloc((unsigned)strlen(optarg) +
+			tmpname = (char *)malloc(sizeof(TMPDIR) + strlen(basename(optarg)) +
 						 sizeof(".XXXXXX") + 1);
 			if (!tmpname)
 				panic("malloc(tmpname)", NULL);
-#ifdef SHORT_FNAMES
-			filenamecpy(tmpname, optarg);
-#else
-			(void) strcpy(tmpname, optarg);
-#endif /* SHORT_FNAMES */
+			(void) strcpy(tmpname, TMPDIR);
+			(void) strcat(tmpname, basename(optarg));
+			(void) strcat(tmpname, ".XXXXXX");
 			break;
 		case 'i':
 #if ENABLE_IXFR
 			ixfrfile = optarg;
-			tmpiname = (char *) malloc(strlen(optarg) +
-						  sizeof(".XXXXXX") + 1);
+			tmpiname = (char *)malloc(sizeof(TMPDIR) + strlen(basename(optarg)) +
+						 sizeof(".XXXXXX") + 1);
 			if (!tmpiname)
 				panic("malloc(tmpiname)", NULL);
-#ifdef SHORT_FNAMES
-			filenamecpy(tmpiname, optarg);
-#else
-			(void) strcpy(tmpiname, optarg);
-#endif /* SHORT_FNAMES */
+			(void) strcpy(tmpiname, TMPDIR);
+			(void) strcat(tmpiname, basename(optarg));
+			(void) strcat(tmpiname, ".XXXXXX");
 #endif /* ENABLE_IXFR */
 			break;
 		case 'p':
@@ -478,8 +479,7 @@
 		usage("tsigfile must be a regular file or FIFO");
 	if (tracefile && (fp = fopen(tracefile, "w")) == NULL)
 		perror(tracefile);
-	(void) strcat(tmpname, ".XXXXXX");
-	/* tmpname is now something like "/etc/named/named.bu.db.XXXXXX" */
+	/* tmpname is something like "/var/named/named.bu.db.XXXXXX" */
 	if ((dbfd = mkstemp(tmpname)) == -1) {
 		perror(tmpname);
 		if (!quiet)
@@ -506,7 +506,6 @@
 		exit(XFER_FAIL);
 	}
 	if (ixfrfile) {
-		(void) strcat(tmpiname, ".XXXXXX");
 		if ((ixfd = mkstemp(tmpiname)) == -1) {
 			perror(tmpiname);
 			if (!quiet)
@@ -537,7 +536,7 @@
 	}
 #ifdef DEBUG
 	if (debug) {
-		/* ddtfile is now something like "/usr/tmp/xfer.ddt.XXXXXX" */
+		/* ddtfile is something like "/var/tmp/xfer.ddt.XXXXXX" */
 		if ((ddtd = mkstemp(ddtfile)) == -1) {
 			perror(ddtfile);
 			debug = 0;
@@ -2713,40 +2712,6 @@
 	}
 	return (result);
 }
-
-#ifdef SHORT_FNAMES
-/*
-** This routine handles creating temporary files with mkstemp
-** in the presence of a 14 char filename system.  Pathconf()
-** does not work over NFS.
-*/
-filenamecpy(char *ddtfile, char *optarg) {
-	int namelen, extra, len;
-	char *dirname, *filename;
-
-	/* determine the length of filename allowed */
-	if((dirname = strrchr(optarg, '/')) == NULL){
-		filename = optarg;
-	} else {
-		*dirname++ = '\0';
-		filename = dirname;
-	}
-	namelen = pathconf(dirname == NULL? "." : optarg, _PC_NAME_MAX);
-	if(namelen <= 0)
-		namelen = 255;  /* length could not be determined */
-	if(dirname != NULL)
-		*--dirname = '/';
-
-	/* copy a shorter name if it will be longer than allowed */
-	extra = (strlen(filename)+strlen(".XXXXXX")) - namelen;
-	if(extra > 0){
-		len = strlen(optarg) - extra;
-		(void) strncpy(ddtfile, optarg, len);
-		ddtfile[len] = '\0';
-	} else
-		(void) strcpy(ddtfile, optarg);
-}
-#endif /* SHORT_FNAMES */
 
 DST_KEY *
 tsig_key_from_addr(struct in_addr addr) {
