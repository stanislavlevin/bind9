diff -uprk.orig bind-9.2.3rc4.orig/bin/named/server.c bind-9.2.3rc4/bin/named/server.c
--- bind-9.2.3rc4.orig/bin/named/server.c	2003-09-19 17:40:42 +0400
+++ bind-9.2.3rc4/bin/named/server.c	2003-11-24 16:18:37 +0300
@@ -2038,8 +2038,12 @@ load_configuration(const char *filename,
 				      "no source of entropy found");
 		} else {
 			const char *randomdev = cfg_obj_asstring(obj);
-			result = isc_entropy_createfilesource(ns_g_entropy,
+			if (strcmp(randomdev, PATH_RANDOMDEV))
+				result = isc_entropy_createfilesource(ns_g_entropy,
 							      randomdev);
+			else
+				result = isc_entropy_createfilefd(ns_g_entropy,
+							      ns_os_open_randomdev());
 			if (result != ISC_R_SUCCESS)
 				isc_log_write(ns_g_lctx,
 					      NS_LOGCATEGORY_GENERAL,
@@ -2055,8 +2059,10 @@ load_configuration(const char *filename,
 	/*
 	 * Relinquish root privileges.
 	 */
-	if (first_time)
+	if (first_time) {
 		ns_os_changeuser();
+		ns_os_dropprivs();
+	}
 
 	/*
 	 * Configure the logging system.
diff -uprk.orig bind-9.2.3rc4.orig/bin/named/unix/include/named/os.h bind-9.2.3rc4/bin/named/unix/include/named/os.h
--- bind-9.2.3rc4.orig/bin/named/unix/include/named/os.h	2002-08-05 10:57:03 +0400
+++ bind-9.2.3rc4/bin/named/unix/include/named/os.h	2003-11-24 16:18:37 +0300
@@ -41,6 +41,12 @@ void
 ns_os_minprivs(void);
 
 void
+ns_os_dropprivs(void);
+
+int
+ns_os_open_randomdev(void);
+
+void
 ns_os_writepidfile(const char *filename, isc_boolean_t first_time);
 
 void
diff -uprk.orig bind-9.2.3rc4.orig/bin/named/unix/os.c bind-9.2.3rc4/bin/named/unix/os.c
--- bind-9.2.3rc4.orig/bin/named/unix/os.c	2002-08-05 10:57:03 +0400
+++ bind-9.2.3rc4/bin/named/unix/os.c	2003-11-24 16:22:23 +0300
@@ -32,6 +32,7 @@
 #include <stdlib.h>
 #include <syslog.h>
 #include <unistd.h>
+#include <time.h>
 
 #include <isc/file.h>
 #include <isc/print.h>
@@ -285,6 +286,40 @@ ns_os_init(const char *progname) {
 #endif
 }
 
+static int dev_null_fd = -1;
+
+static int
+open_dev_null (void)
+{
+	if (dev_null_fd < 0)
+		dev_null_fd = open("/dev/null", O_RDWR, 0);
+
+	return dev_null_fd;
+}
+
+static void
+close_dev_null (void)
+{
+	if (dev_null_fd >= 0)
+	{
+		close(dev_null_fd);
+		dev_null_fd = -1;
+	}
+}
+
+int
+ns_os_open_randomdev (void)
+{
+	static int fd = -1;
+
+#ifdef PATH_RANDOMDEV
+	if (fd < 0)
+		fd = open(PATH_RANDOMDEV, O_RDONLY | O_NONBLOCK, 0);
+#endif
+
+	return fd;
+}
+
 void
 ns_os_daemonize(void) {
 	pid_t pid;
@@ -322,7 +357,7 @@ ns_os_daemonize(void) {
 	 * and will end up closing the wrong FD.  This will be fixed eventually,
 	 * and these calls will be removed.
 	 */
-	fd = open("/dev/null", O_RDWR, 0);
+	fd = open_dev_null();
 	if (fd != -1) {
 		close(STDIN_FILENO);
 		(void)dup2(fd, STDIN_FILENO);
@@ -333,7 +368,7 @@ ns_os_daemonize(void) {
 		if (fd != STDIN_FILENO &&
 		    fd != STDOUT_FILENO &&
 		    fd != STDERR_FILENO)
-			(void)close(fd);
+			close_dev_null();
 	}
 }
 
@@ -353,6 +388,9 @@ void
 ns_os_chroot(const char *root) {
 	char strbuf[ISC_STRERRORSIZE];
 	if (root != NULL) {
+		tzset();
+		open_dev_null();
+		ns_os_open_randomdev();
 		if (chroot(root) < 0) {
 			isc__strerror(errno, strbuf, sizeof(strbuf));
 			ns_main_earlyfatal("chroot(): %s", strbuf);
@@ -435,6 +473,13 @@ ns_os_minprivs(void) {
 #endif
 }
 
+void
+ns_os_dropprivs(void) {
+#if defined(HAVE_LINUX_CAPABILITY_H) && !defined(HAVE_LINUXTHREADS)
+	linux_setcaps(0);
+#endif
+}
+
 static int
 safe_open(const char *filename, isc_boolean_t append) {
 	int fd;
diff -uprk.orig bind-9.2.3rc4.orig/lib/isc/include/isc/entropy.h bind-9.2.3rc4/lib/isc/include/isc/entropy.h
--- bind-9.2.3rc4.orig/lib/isc/include/isc/entropy.h	2001-09-06 04:14:18 +0400
+++ bind-9.2.3rc4/lib/isc/include/isc/entropy.h	2003-11-24 16:18:37 +0300
@@ -166,6 +166,9 @@ isc_entropy_createfilesource(isc_entropy
  * The file will never be opened/read again once EOF is reached.
  */
 
+isc_result_t
+isc_entropy_createfilefd(isc_entropy_t *ent, int fd);
+
 void
 isc_entropy_destroysource(isc_entropysource_t **sourcep);
 /*
diff -uprk.orig bind-9.2.3rc4.orig/lib/isc/unix/entropy.c bind-9.2.3rc4/lib/isc/unix/entropy.c
--- bind-9.2.3rc4.orig/lib/isc/unix/entropy.c	2002-08-05 10:57:16 +0400
+++ bind-9.2.3rc4/lib/isc/unix/entropy.c	2003-11-24 16:19:30 +0300
@@ -288,23 +288,17 @@ make_nonblock(int fd) {
 }
 
 isc_result_t
-isc_entropy_createfilesource(isc_entropy_t *ent, const char *fname) {
-	int fd;
+isc_entropy_createfilefd(isc_entropy_t *ent, int fd) {
 	isc_result_t ret;
 	isc_entropysource_t *source;
 
 	REQUIRE(VALID_ENTROPY(ent));
-	REQUIRE(fname != NULL);
+	REQUIRE(fd >= 0);
 
 	LOCK(&ent->lock);
 
 	source = NULL;
 
-	fd = open(fname, O_RDONLY | O_NONBLOCK, 0);
-	if (fd < 0) {
-		ret = isc__errno2result(errno);
-		goto errout;
-	}
 	ret = make_nonblock(fd);
 	if (ret != ISC_R_SUCCESS)
 		goto closefd;
@@ -339,7 +333,6 @@ isc_entropy_createfilesource(isc_entropy
  closefd:
 	close(fd);
 
- errout:
 	if (source != NULL)
 		isc_mem_put(ent->mctx, source, sizeof(isc_entropysource_t));
 
@@ -347,3 +340,17 @@ isc_entropy_createfilesource(isc_entropy
 
 	return (ret);
 }
+
+isc_result_t
+isc_entropy_createfilesource(isc_entropy_t *ent, const char *fname) {
+	int fd;
+
+	REQUIRE(VALID_ENTROPY(ent));
+	REQUIRE(fname != NULL);
+
+	fd = open(fname, O_RDONLY | O_NONBLOCK, 0);
+	if (fd < 0) {
+		return isc__errno2result(errno);
+	}
+	return isc_entropy_createfilefd(ent, fd);
+}
