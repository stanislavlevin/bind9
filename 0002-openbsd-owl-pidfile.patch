From f56a3c28e259b0c623acd6a4a1d76f2365e11a82 Mon Sep 17 00:00:00 2001
From: - <->
Date: Mon, 15 Oct 2012 15:44:28 +0400
Subject: [PATCH] openbsd-owl-pidfile

Prevent from subsequent pidfile open tries

diff --git a/bind/bin/named/include/named/globals.h b/bind/bin/named/include/named/globals.h
index 445a7f3..f90ddab 100644
--- a/bind/bin/named/include/named/globals.h
+++ b/bind/bin/named/include/named/globals.h
@@ -145,6 +145,8 @@ EXTERN const char *		ns_g_defaultpidfile 	INIT(NS_LOCALSTATEDIR
 EXTERN const char *		lwresd_g_defaultpidfile INIT(NS_LOCALSTATEDIR
 							     "/run/lwresd.pid");
 #endif
+EXTERN const char *		ns_g_pidfile		INIT(NS_LOCALSTATEDIR
+							    "/run/named.pid");
 
 #ifdef HAVE_DNSTAP
 EXTERN const char *		ns_g_defaultdnstap
diff --git a/bind/bin/named/main.c b/bind/bin/named/main.c
index 64ee3ce..43ca99e 100644
--- a/bind/bin/named/main.c
+++ b/bind/bin/named/main.c
@@ -320,6 +320,7 @@ usage(void) {
 	fprintf(stderr,
 		"usage: named [-4|-6] [-c conffile] [-d debuglevel] "
 		"[-E engine] [-f|-g]\n"
+		"             [-i pidfile]\n"
 		"             [-n number_of_cpus] [-p port] [-s] "
 		"[-S sockets] [-t chrootdir]\n"
 		"             [-u username] [-U listeners] "
@@ -516,9 +517,8 @@ parse_command_line(int argc, char *argv[]) {
 			ns_g_foreground = true;
 			ns_g_logstderr = true;
 			break;
-		/* XXXBEW -i should be removed */
 		case 'i':
-			lwresd_g_defaultpidfile = isc_commandline_argument;
+			ns_g_pidfile = isc_commandline_argument;
 			break;
 		case 'l':
 			ns_g_lwresdonly = true;
@@ -968,6 +968,13 @@ setup(void) {
 	char *instance = NULL;
 #endif
 
+        /*
+	 * Write pidfile before chroot if specified on the command line
+	 */
+	if (ns_g_pidfile != NULL) {
+		ns_os_preopenpidfile(ns_g_pidfile);
+	}
+
 	/*
 	 * Get the user and group information before changing the root
 	 * directory, so the administrator does not need to keep a copy
diff --git a/bind/bin/named/server.c b/bind/bin/named/server.c
index 64a5180..e50a2d6 100644
--- a/bind/bin/named/server.c
+++ b/bind/bin/named/server.c
@@ -7853,17 +7853,21 @@ load_configuration(const char *filename, ns_server_t *server,
 	/*
 	 * Write the PID file.
 	 */
-	obj = NULL;
-	if (ns_config_get(maps, "pid-file", &obj) == ISC_R_SUCCESS) {
-		if (cfg_obj_isvoid(obj)) {
-			ns_os_writepidfile(NULL, first_time);
+	if (ns_g_pidfile != NULL) {
+		ns_os_writepidfile(ns_g_pidfile, first_time);
+	} else {
+		obj = NULL;
+		if (ns_config_get(maps, "pid-file", &obj) == ISC_R_SUCCESS) {
+			if (cfg_obj_isvoid(obj)) {
+				ns_os_writepidfile(NULL, first_time);
+			} else {
+				ns_os_writepidfile(cfg_obj_asstring(obj), first_time);
+			}
+		} else if (ns_g_lwresdonly) {
+			ns_os_writepidfile(lwresd_g_defaultpidfile, first_time);
 		} else {
-			ns_os_writepidfile(cfg_obj_asstring(obj), first_time);
+			ns_os_writepidfile(ns_g_defaultpidfile, first_time);
 		}
-	} else if (ns_g_lwresdonly) {
-		ns_os_writepidfile(lwresd_g_defaultpidfile, first_time);
-	} else {
-		ns_os_writepidfile(ns_g_defaultpidfile, first_time);
 	}
 
 	/*
diff --git a/bind/bin/named/unix/include/named/os.h b/bind/bin/named/unix/include/named/os.h
index 62b3af8..37be0c4 100644
--- a/bind/bin/named/unix/include/named/os.h
+++ b/bind/bin/named/unix/include/named/os.h
@@ -49,6 +49,9 @@ FILE *
 ns_os_openfile(const char *filename, mode_t mode, bool switch_user);
 
 void
+ns_os_preopenpidfile(const char *filename);
+
+void
 ns_os_writepidfile(const char *filename, bool first_time);
 
 bool
diff --git a/bind/bin/named/unix/os.c b/bind/bin/named/unix/os.c
index 01e7506..1d925e6 100644
--- a/bind/bin/named/unix/os.c
+++ b/bind/bin/named/unix/os.c
@@ -48,6 +48,8 @@
 
 static char *pidfile = NULL;
 static char *lockfile = NULL;
+static bool preopenpidfile = false;
+static FILE *pidref = NULL;
 static int devnullfd = -1;
 static int singletonfd = -1;
 
@@ -872,35 +874,58 @@ ns_os_openfile(const char *filename, mode_t mode, isc_boolean_t switch_user) {
 	return (fp);
 }
 
-void
-ns_os_writepidfile(const char *filename, bool first_time) {
-	FILE *fh;
-	pid_t pid;
+static FILE*
+open_pidfile(const char *filename, bool first_time) {
+	static FILE *fh=NULL;
 	char strbuf[ISC_STRERRORSIZE];
 	void (*report)(const char *, ...);
 
-	/*
-	 * The caller must ensure any required synchronization.
-	 */
-
 	report = first_time ? ns_main_earlyfatal : ns_main_earlywarning;
 
 	cleanup_pidfile();
 
 	if (filename == NULL)
-		return;
+		return NULL;
 
 	pidfile = strdup(filename);
 	if (pidfile == NULL) {
 		isc__strerror(errno, strbuf, sizeof(strbuf));
 		(*report)("couldn't strdup() '%s': %s", filename, strbuf);
-		return;
+		return NULL;
 	}
 
 	fh = ns_os_openfile(filename, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH,
 				  first_time);
+	return fh;
+}
+
+void
+ns_os_preopenpidfile(const char *filename) {
+	pidref = open_pidfile(filename, true);
+	preopenpidfile = true;
+}
+
+void
+ns_os_writepidfile(const char *filename, bool first_time) {
+	FILE *fh;
+	pid_t pid;
+	void (*report)(const char *, ...);
+
+	/*
+	 * The caller must ensure any required synchronization.
+	 */
+
+	report = first_time ? ns_main_earlyfatal : ns_main_earlywarning;
+
+	if (preopenpidfile == true) {
+		fh = pidref;
+	} else {
+		fh = open_pidfile(filename, first_time);
+	}
 	if (fh == NULL) {
-		cleanup_pidfile();
+		if (preopenpidfile == false) {
+			cleanup_pidfile();
+		}
 		return;
 	}
 #ifdef HAVE_LINUXTHREADS
@@ -911,16 +936,23 @@ ns_os_writepidfile(const char *filename, isc_boolean_t first_time) {
 	if (fprintf(fh, "%ld\n", (long)pid) < 0) {
 		(*report)("fprintf() to pid file '%s' failed", filename);
 		(void)fclose(fh);
-		cleanup_pidfile();
+		if (preopenpidfile == false) {
+			cleanup_pidfile();
+		}
 		return;
 	}
 	if (fflush(fh) == EOF) {
 		(*report)("fflush() to pid file '%s' failed", filename);
 		(void)fclose(fh);
-		cleanup_pidfile();
+		if (preopenpidfile == false) {
+			cleanup_pidfile();
+		}
 		return;
 	}
 	(void)fclose(fh);
+	if (preopenpidfile == true) {
+		pidref = NULL;
+	}
 }
 
 bool
@@ -981,7 +1013,9 @@ ns_os_issingleton(const char *filename) {
 void
 ns_os_shutdown(void) {
 	closelog();
-	cleanup_pidfile();
+	if (preopenpidfile == false) {
+		cleanup_pidfile();
+	}
 	cleanup_lockfile();
 }
 
-- 
2.10.5

